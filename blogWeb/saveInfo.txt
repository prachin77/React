mongodb string : mongodb://localhost:27017

user image link : <a href="https://www.flaticon.com/free-icons/user" title="user icons"></a>


const sendDataToServer = (value) => {
        axios.post('http://localhost:3001/register', { username : userName , email : regEmail,  password : regPassword })
            .then(result => console.log(result))
            .catch(err => console.log(err))
}

const checkUserFromDatabase = (value) => {
        axios.post("http://localhost:3001/login",{ email : regEmail , password : regPassword})
        .then(result => {
            setFrontendUserName(result.data.username)
            setIsLogin(false)
            // frontendUserName = result.data.username;
            // window.alert("username from coming from backend and printed in fronted = ",{frontendUserName})
            console.log("username from fronted = ",result.data.username)
        })
        .catch(err => console.log(err))
}

const loginUser = async () => {
        let storeUserInfo = "";
        try {
            const userCredential = await signInWithEmailAndPassword(
                auth,
                regEmail,
                regPassword
            );

            window.alert("user logged in ðŸ˜Ž")
            console.log("user details : ", userCredential.user);
            navigate("/");
            return userCredential.user.uid;
        } catch (error) {
            window.alert("user not found ðŸ˜­")
        }
}

const registerUser = async () => {
        let i;
        try {
            const {userCredential} = await signInWithEmailAndPassword(auth, regEmail, regPassword);
            await updateProfile(userCredential.user,{displayName : userName});
            console.log(userName);
            window.alert("User already exists. Please choose a different email or login directly.");
            setRegMode(false);
        } 
        catch (error) {        
            if (error.code === "auth/user-not-found") {
                const user = await createUserWithEmailAndPassword(auth, regEmail, regPassword);
                window.alert("User created successfully!");
                setRegMode(false); 
            }
        }
        try {
            if (regPassword.length < 6) {
                window.alert("Password must be at least 6 characters long");
                return;
            }
            for (i = 0; i < regPassword.length; i++) {
                if (regPassword[i] === " ") {
                    window.alert("Password cannot contain spaces");
                    return;
                }
            }

            const userRegisterCredential = await createUserWithEmailAndPassword(
                auth,
                regEmail,
                regPassword
            );
            console.log(userRegisterCredential.user.uid);
            window.alert("user added : ");
            setRegMode(false);
            navigate('/login');
            return userRegisterCredential.user.uid;
        } catch (error) {
            window.alert("error");
        }
    }
